{"version":3,"sources":["components/card.js","components/cardlist.js","components/searchbox.js","components/scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAgBeA,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE3B,OAEC,yBAAKC,UAAU,wCACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACC,4BAAKF,GACL,2BAAIC,MCSQK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEOA,EAAOC,KAAK,SAACC,EAAKC,GACzB,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCKJW,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC/B,OACA,yBAAKX,UAAY,OACd,2BACDA,UAAU,kCACVY,KAAK,SACLC,YAAa,gBACbC,SAAUH,MCCEI,G,MARF,SAACC,GACb,OACD,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,mBAAmBC,OAAQ,UACjEJ,EAAMK,YCkCUC,E,kDAjCd,aAAc,IAAD,8BACZ,gBAWDC,eAAiB,SAACC,GACnB,EAAKC,SAAS,CAACf,YAAYc,EAAME,OAAOC,SAXtC,EAAKC,MAAQ,CACdxB,OAAO,GACPM,YAAY,IAJC,E,gEAOO,IAAD,OACnBmB,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAC/DA,EAASC,UACVF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAK3B,IAAD,EACoBC,KAAKN,MAAzBxB,EADA,EACAA,OAAOM,EADP,EACOA,YACRyB,EAAe/B,EAAOgC,QAAO,SAAAC,GACrC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAErD,OAAQlC,EAAOoC,OAGb,yBAAKxC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACD,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,OAAS+B,MANlB,wBAAInC,UAAU,MAAd,e,GAtBeyC,aCOAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACT,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD2HzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ff9ad9cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n  \r\n\treturn (\r\n\r\n\t\t<div className='tc dib br5 pa3 ma3 grow bw2 shadow-4'>\r\n\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './card';\r\nconst CardList = ({robots}) => {\r\n\treturn(\r\n\t\t<div>\r\n         {\r\n         robots.map ((user,i) => {\r\n\t\treturn (<Card \r\n\t\tkey={i}\r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}/>\r\n\t\t);\t\r\n         })\r\n     }\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\treturn(\r\n <div className = 'pa2'>\r\n    <input \r\n   className='pa3 ba b--pink bg-lightest-pink'\r\n   type='search' \r\n   placeholder= 'search robots'\r\n   onChange={searchChange}\r\n    />\r\n\r\n</div>\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll=(props) =>{\r\n\treturn (\r\n<div style={{overflowY:'scroll',border:'1px hidden black',height :'500px'}}>\r\n{props.children}\r\n</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","\timport React,{Component} from 'react';\r\n\timport CardList from '../components/cardlist';\r\n\timport SearchBox from '../components/searchbox'\r\n\timport  './App.css'\r\n\timport Scroll from '../components/scroll'; \r\n\t\tclass App extends Component {\r\n\t\t\tconstructor(){\r\n\t\t\t\tsuper()\r\n\t\t\t\tthis.state = {\r\n\t\t\trobots:[], \r\n\t\t\tsearchfield:''\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcomponentDidMount(){\r\n\t\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>\r\n\t\t\t\t response.json())\t\r\n\t\t\t.then(users=>this.setState({robots: users}));\r\n\t\t\t}\r\n\t\t\tonSearchChange = (event)=>{\r\n\t\tthis.setState({searchfield:event.target.value})\t\r\n\t\t}\r\n\t\t\trender(){\r\n\t\t\t\tconst {robots,searchfield}=this.state;\r\n\t\t\t\tconst filteredRobots=robots.filter(robot=> {\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\t\r\n\t\t})\r\n\t\treturn !robots.length?\r\n\t\t \t <h1 className='tc'>Loading</h1> :\r\n\t\t \t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<CardList robots= {filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\t}\r\n\t\texport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n<App/>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}